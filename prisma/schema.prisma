// Prisma 스키마 파일
// DB: SQLite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model File {
  id            String    @id @default(cuid())
  title         String
  artist        String?
  fileType      String    // MP3, MP4 등
  fileSize      Int
  duration      Int?      // 재생 시간 (초)
  path          String    // 서버 파일 시스템 경로
  thumbnailPath String?
  sourceUrl     String?   // 원본 URL (유튜브 등)
  groupType     String?   // YOUTUBE_SINGLE, YOUTUBE_PLAYLIST, MELON_CHART
  groupName     String?   // 그룹 이름 (날짜, 플레이리스트명 등)
  rank          Int?      // 멜론차트 순위
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  downloads     Int       @default(0)
  shares        Share[]   // 공유 링크 관계
  playlistItems PlaylistItem[]  // 플레이리스트 항목 관계
  playHistory   PlayHistory[]   // 재생 기록 관계
  downloadQueue DownloadQueue[] // 다운로드 큐 관계
}

model Share {
  id           String    @id @default(cuid())
  shortCode    String    @unique
  expiresAt    DateTime?
  maxDownloads Int?
  downloads    Int       @default(0)
  createdAt    DateTime  @default(now())
  files        File[]
}

model Settings {
  id             String    @id @default(cuid())
  password       String    // 해시된 비밀번호
  excludeKeywords String?
  storageLimit   Int
  darkMode       Boolean   @default(false)
}

model DownloadQueue {
  id        String    @id @default(cuid())
  url       String
  type      String
  status    String
  progress  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  error     String?
  fileId    String?
  file      File?     @relation(fields: [fileId], references: [id])
}

model Playlist {
  id          String         @id @default(cuid())
  name        String
  description String?
  isSystem    Boolean        @default(false)  // 시스템 플레이리스트 여부
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  items       PlaylistItem[]
}

model PlaylistItem {
  id         String   @id @default(cuid())
  playlistId String
  fileId     String
  order      Int      // 플레이리스트 내 순서
  addedAt    DateTime @default(now())
  
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@unique([playlistId, fileId])
  @@index([playlistId, order])
}

model PlayHistory {
  id        String   @id @default(cuid())
  fileId    String
  playedAt  DateTime @default(now())
  duration  Int?     // 재생된 시간 (초)
  completed Boolean  @default(false) // 완전히 재생했는지 여부
  
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  @@index([playedAt])
  @@index([fileId, playedAt])
} 